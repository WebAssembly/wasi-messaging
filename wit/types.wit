/// An interface grouping all necessary types for messaging.
default interface messaging-types {
    /// A broker type that allows the exchange of messages.
    type broker = u32
    drop-broker: func(b: broker)
    open-broker: func(name: string) -> result<broker, error>

    /// An event type that follows the CloudEvents specification (https://github.com/cloudevents/spec/blob/main/cloudevents/spec.md). We
    /// assume the type of the data is a byte sequence. It is up to the data schema to determine what type of the data payload the event 
    /// contains.
    record event {
		specversion: string,
		ty: string,
		source: string,
		id: string,
		data: option<list<u8>>,
		datacontenttype: option<string>,
		dataschema: option<string>,
		subject: option<string>,
		time: option<string>,	
		extensions: option<list<tuple<string, string>>>
    }
    
    /// Channels specify where a published message should land. There are two types of channels:
    /// - queue: competitive consumers, and
    /// - topic: non-competitive consumers.
    variant channel {
		queue(string),
		topic(string)
    }
    
    /// An error type
    variant error {
        payload-too-large(string),
        queue-or-topic-not-found(string),
        insufficient-permissions(string),
        service-unavailable(string),
        delivery-failed(string),
        connection-lost(string),
        unsupported-message-format(string),
        unexpected-error(string),
    }

	// A subscription token that allows receives from a specific subscription
	type subscription-token = string
}