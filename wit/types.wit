interface messaging-types {
    /// A connection to a message-exchange service (e.g., buffer, broker, etc.).
    resource client {
        connect: static func(name: string) -> result<client, error>;
    }
    
    /// TODO(danbugs): This should be eventually extracted as an underlying type for other wasi-cloud-core interfaces.
    resource error {
        trace: static func() -> string;    
    }
  
    /// There are two types of channels:
    /// - publish-subscribe channel, which is a broadcast channel, and
    /// - point-to-point channel, which is a unicast channel.
    ///
    /// The interface doesn't highlight this difference in the type itself as that's uniquely a consumer issue.
    type channel = string;
  
    /// Configuration includes a required list of channels the guest is subscribing to, and an optional list of extensions key-value pairs 
    /// (e.g., partitions/offsets to read from in Kafka/EventHubs, QoS etc.).
    record guest-configuration {
        channels: list<channel>,
        extensions: option<list<tuple<string, string>>>
    }
  
    /// A message with a binary payload and additional information
    record message {
        /// The topic or subject this message was received or should be sent on
        topic: string,
        /// An optional topic for use in request/response scenarios
        reply-to: option<string>,
        /// An opaque blob of data
        data: list<u8>,
        /// Optional metadata (also called headers or attributes in some systems) attached to the message
        metadata: option<list<tuple<string, string>>>
    }
}