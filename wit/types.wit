default interface messaging-types {
    /// A connection to a message-exchange service (e.g., buffer, broker, etc.).
    type client = u32
    disconnect: func(c: client)
    connect: func(name: string) -> result<client, error>
  
    /// TODO(danbugs): This should be eventually extracted as an underlying type for other wasi-cloud-core interfaces.
    type error = u32
    drop-error: func(e: error)
    trace: func(e: error) -> string
  
    /// There are two types of channels:
    /// - publish-subscribe channel, which is a broadcast channel, and
    /// - point-to-point channel, which is a unicast channel.
    ///
    /// The interface doesn't highlight this difference in the type itself as that's uniquely a consumer issue.
    type channel = string
  
    /// Configuration includes a required list of channels the guest is subscribing to, and an optional list of extensions key-value pairs 
    /// (e.g., partitions/offsets to read from in Kafka/EventHubs, QoS etc.).
    record guest-configuration {
        channels: list<channel>,
        extensions: option<list<tuple<string, string>>>
    }
  
    /// Format specification for messages 
    ///  - more info: https://github.com/clemensv/spec/blob/registry-extensions/registry/spec.md#message-formats
    ///  - message metadata can further decorate w/ things like format version, and so on.
    enum format-spec {
        cloudevents,
        http,
        amqp,
        mqtt,
        kafka,
        raw
    }
  
    /// A message with a binary payload, a format specification, and decorative metadata.
    record message {
        data: list<u8>,
        format: format-spec,
        metadata: option<list<tuple<string, string>>>
    }
}