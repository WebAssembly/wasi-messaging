interface types {
    /// A connection to a message-exchange service (e.g., buffer, broker, etc.).
    resource client {
        connect: static func(name: string) -> result<client, error>;
    }
    
    /// Errors that can occur when using the messaging interface.
    variant error {
        /// The requested option is not authorized. This could be a topic it doesn't have
        /// permission to subscribe to, or a permission it doesn't have to perform a specific
        /// action. This error is mainly used when calling `set-subscriptions` on a guest.
        unauthorized,
        /// The request or operation timed out.
        timeout,
        /// An error occurred with the connection. Includes a message for additional context
        connection(string),
        /// Work on the message was abandoned for the given reason
        abandoned(string),
        /// A catch all for other types of errors
        other(string),
    }
  
    /// A message with a binary payload and additional information
    resource message {
        constructor(topic: string, data: list<u8>);
        /// The topic/subject/channel this message was received or should be sent on
        topic: func() -> string;
        /// Set the topic/subject/channel this message should be sent on
        set-topic: func(topic: string);
        /// An optional content-type describing the format of the data in the message. This is 
        /// sometimes described as the "format" type
        content-type: func() -> option<string>;
        /// Set the content-type describing the format of the data in the message. This is
        /// sometimes described as the "format" type
        set-content-type: func(content-type: string);
        /// An opaque blob of data
        data: func() -> list<u8>;
        /// Set the opaque blob of data for this message, discarding the old value
        set-data: func(data: list<u8>);
        /// Optional metadata (also called headers or attributes in some systems) attached to the
        /// message
        metadata: func() -> option<list<tuple<string, string>>>;
        /// Add a new key-value pair to the metadata, overwriting any existing value for the same key
        add-metadata: func(key: string, value: string);
    }
}