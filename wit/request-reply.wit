/// The request-reply interface allows a guest to send a message and await a response. This
/// interface is considered optional as not all message services support the concept of
/// request/reply. However, request/reply is a very common pattern in messaging and as such, we have
/// included it as a core interface.
interface request-reply {
    use types.{client, message, error};

    /// Options for a request/reply operation. This is a resource to allow for future expansion of
    /// options.
    resource request-options {
        /// Creates a new request options resource with no options set.
        constructor();

        /// The maximum amount of time to wait for a response. If the timeout value is not set, then
        /// the request/reply operation will block until a message is received in response.
        set-timeout-ms: func(timeout-ms: u32);
    }

    /// Performs a blocking request/reply operation with an optional set of request options. This
    /// returns only the first reply received or a timeout . If more than one reply is expected, then the
    /// `request-multi` function should be used instead.
    request: func(c: borrow<client>, msg: message, opts: option<request-options>) -> result<message, error>;

    /// Performs a blocking request/reply operation with an optional set of request options. This
    /// returns all replies received up to the number of expected replies. It is recommended to use
    /// a `request-options` with the timeout set to ensure that the operation does not block
    /// indefinitely.
    request-multi: func(c: borrow<client>, msg: message, expected-replies: u32, opts: option<request-options>) -> result<list<message>, error>;

    /// Replies to the given message with the given response message. The details of which channel 
    /// the message is sent to is up to the implementation. This allows for reply to details to be
    /// handled in the best way possible for the underlying messaging system.
    reply: func(reply-to: borrow<message>, reply: message) -> result<_, error>;
}